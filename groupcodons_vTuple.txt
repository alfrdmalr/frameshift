here's the method version where you return a tuple to allow for the remainder:
/// <summary>
        /// Creates triplet groups of nucleobases starting from the first member of seq.
        /// Returns a tuple containing the list of triplet AACodons and any "remainder" 
        /// nucleobases that did not belong to their own triplet
        /// </summary>
        /// <param name="seq">RNA sequence to group</param>
        /// <returns>Returns tuple of form (List<AACodon>, Nucleobase[])</returns>
        public Tuple<List<AACodon>, Nucleobase[]> GroupCodons(Nucleobase[] seq)
        {
            if (seq.Length < AACodonExtension.CODON_LENGTH)
            {
                throw new ArgumentException("sequence length must be at least the length of a single codon");
            }
            List<AACodon> triplets = new List<AACodon>();
            Nucleobase[] remainder = new Nucleobase[seq.Length % AACodonExtension.CODON_LENGTH];
            int lengthDiff = seq.Length - AACodonExtension.CODON_LENGTH; //readability

            for (int i = 0; i < lengthDiff + 1; i++)
            {
                Nucleobase[] codonSeq = new Nucleobase[AACodonExtension.CODON_LENGTH];
                Array.Copy(seq, i, codonSeq, 0, AACodonExtension.CODON_LENGTH);
                triplets.Add(AACodonExtension.BuildAACodon(codonSeq));
            }
            //TODO check this logic
            for (int i = 0; lengthDiff + i < seq.Length; i++)
            {
                remainder[i] = seq[lengthDiff + i];
            }

            return Tuple.Create(triplets, remainder);
        }